<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="2022.1.2">
  <Settings>
    <Param val="use prefs" valType="str" updates="None" name="Audio latency priority"/>
    <Param val="use prefs" valType="str" updates="None" name="Audio lib"/>
    <Param val="" valType="str" updates="None" name="Completed URL"/>
    <Param val="auto" valType="str" updates="None" name="Data file delimiter"/>
    <Param val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code" updates="None" name="Data filename"/>
    <Param val="True" valType="bool" updates="None" name="Enable Escape"/>
    <Param val="{'participant': ''}" valType="code" updates="None" name="Experiment info"/>
    <Param val="True" valType="bool" updates="None" name="Force stereo"/>
    <Param val="False" valType="bool" updates="None" name="Full-screen window"/>
    <Param val="html" valType="str" updates="None" name="HTML path"/>
    <Param val="" valType="str" updates="None" name="Incomplete URL"/>
    <Param val="testMonitor" valType="str" updates="None" name="Monitor"/>
    <Param val="[]" valType="fileList" updates="None" name="Resources"/>
    <Param val="False" valType="bool" updates="None" name="Save csv file"/>
    <Param val="False" valType="bool" updates="None" name="Save excel file"/>
    <Param val="False" valType="bool" updates="None" name="Save hdf5 file"/>
    <Param val="True" valType="bool" updates="None" name="Save log file"/>
    <Param val="True" valType="bool" updates="None" name="Save psydat file"/>
    <Param val="True" valType="bool" updates="None" name="Save wide csv file"/>
    <Param val="2" valType="num" updates="None" name="Screen"/>
    <Param val="True" valType="bool" updates="None" name="Show info dlg"/>
    <Param val="False" valType="bool" updates="None" name="Show mouse"/>
    <Param val="deg" valType="str" updates="None" name="Units"/>
    <Param val="" valType="str" updates="None" name="Use version"/>
    <Param val="[1680, 1050]" valType="code" updates="None" name="Window size (pixels)"/>
    <Param val="avg" valType="str" updates="None" name="blendMode"/>
    <Param val="$[0,0,0]" valType="str" updates="None" name="color"/>
    <Param val="rgb" valType="str" updates="None" name="colorSpace"/>
    <Param val="100.1.1.1" valType="str" updates="None" name="elAddress"/>
    <Param val="FILTER_LEVEL_2" valType="str" updates="None" name="elDataFiltering"/>
    <Param val="FILTER_LEVEL_OFF" valType="str" updates="None" name="elLiveFiltering"/>
    <Param val="EYELINK 1000 DESKTOP" valType="str" updates="None" name="elModel"/>
    <Param val="ELLIPSE_FIT" valType="str" updates="None" name="elPupilAlgorithm"/>
    <Param val="PUPIL_AREA" valType="str" updates="None" name="elPupilMeasure"/>
    <Param val="1000" valType="num" updates="None" name="elSampleRate"/>
    <Param val="False" valType="bool" updates="None" name="elSimMode"/>
    <Param val="RIGHT_EYE" valType="str" updates="None" name="elTrackEyes"/>
    <Param val="PUPIL_CR_TRACKING" valType="str" updates="None" name="elTrackingMode"/>
    <Param val="LeuvenEFT" valType="str" updates="None" name="expName"/>
    <Param val="on Sync" valType="str" updates="None" name="exportHTML"/>
    <Param val="None" valType="str" updates="None" name="eyetracker"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="gpAddress"/>
    <Param val="4242" valType="num" updates="None" name="gpPort"/>
    <Param val="PsychToolbox" valType="str" updates="None" name="keyboardBackend"/>
    <Param val="debug" valType="code" updates="None" name="logging level"/>
    <Param val="('MIDDLE_BUTTON',)" valType="list" updates="None" name="mgBlink"/>
    <Param val="CONTINUOUS" valType="str" updates="None" name="mgMove"/>
    <Param val="0.5" valType="num" updates="None" name="mgSaccade"/>
    <Param val="0.6" valType="num" updates="None" name="plConfidenceThreshold"/>
    <Param val="True" valType="bool" updates="None" name="plPupilCaptureRecordingEnabled"/>
    <Param val="" valType="str" updates="None" name="plPupilCaptureRecordingLocation"/>
    <Param val="127.0.0.1" valType="str" updates="None" name="plPupilRemoteAddress"/>
    <Param val="50020" valType="num" updates="None" name="plPupilRemotePort"/>
    <Param val="1000" valType="num" updates="None" name="plPupilRemoteTimeoutMs"/>
    <Param val="False" valType="bool" updates="None" name="plPupillometryOnly"/>
    <Param val="psychopy_iohub_surface" valType="str" updates="None" name="plSurfaceName"/>
    <Param val="" valType="str" updates="None" name="tbLicenseFile"/>
    <Param val="" valType="str" updates="None" name="tbModel"/>
    <Param val="60" valType="num" updates="None" name="tbSampleRate"/>
    <Param val="" valType="str" updates="None" name="tbSerialNo"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code_trial">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="from random import choice, sample, shuffle&amp;#10;import pandas as pd&amp;#10;&amp;#10;### IMPORT DATA FROM CSV FILE AND REMOVE IT ###&amp;#10;TRIAL_ORDER_DIR_NAME = 'trial_orders'&amp;#10;trial_order_filenames = [x for x in os.listdir(TRIAL_ORDER_DIR_NAME) if not x.startswith('.')]&amp;#10;assert len(trial_order_filenames) &gt; 0, &quot;There are no trial order files left, you need to generate more.&quot;&amp;#10;trial_order_filename = trial_order_filenames[0]&amp;#10;fpath = os.path.join(TRIAL_ORDER_DIR_NAME, trial_order_filename)&amp;#10;&amp;#10;df = pd.read_csv(fpath)&amp;#10;nrows = len(df)&amp;#10;block_order = []&amp;#10;row_no = 0&amp;#10;while row_no &lt; nrows:&amp;#10;    block_type = df['block_type'][row_no]&amp;#10;    block_order.append(block_type)&amp;#10;    if block_type == 'test':&amp;#10;        row_no += 4&amp;#10;    elif block_type == 'control':&amp;#10;        row_no += 8&amp;#10;    else:&amp;#10;        row_no += 1&amp;#10;&amp;#10;target_paths = tuple(df['target_path'])&amp;#10;left_paths = tuple(df['left_path'])&amp;#10;right_paths = tuple(df['right_path'])&amp;#10;correct_keys = tuple(LEFT_KEY if x=='True' else RIGHT_KEY for x in df['left_correct'])&amp;#10;&amp;#10;# remove the trial order file to make sure it isn't used again&amp;#10;os.remove(fpath)&amp;#10;&amp;#10;### END IMPORT DATA ###&amp;#10;&amp;#10;### BEGIN FORM IMAGE COMPONENTS ###&amp;#10;def leftimg_factory(name, image, spec_pos):&amp;#10;    &quot;&quot;&quot;&amp;#10;    Generates ImageStim instances for &amp;#10;    L-EFT trial images (this is to avoid repeating code &amp;#10;    for building the stimuli components).&amp;#10;    :name: Name (used internally by PsychoPy) of the stimulus.&amp;#10;    :image: File path to the image that is to be used.&amp;#10;    :spec_pos: Two-element tuple, specifying the position&amp;#10;    (in degrees) at which the image should be displayed.&amp;#10;    &quot;&quot;&quot;&amp;#10;    out_image = visual.ImageStim(&amp;#10;        win=win,&amp;#10;        name=name, units='deg', &amp;#10;        image=image, mask=None,&amp;#10;        ori=0, pos=spec_pos, &amp;#10;        size=(IMAGE_SIZE, IMAGE_SIZE),&amp;#10;        color=[1,1,1], colorSpace='rgb', opacity=1.0,&amp;#10;        flipHoriz=False, flipVert=False,&amp;#10;        texRes=512, interpolate=True, depth=-2.0&amp;#10;    )&amp;#10;    return out_image&amp;#10;&amp;#10;# form a list of tuples, where each tuple holds the &amp;#10;# position specification for a type of image, and a&amp;#10;# list of all file paths to the type/category's images&amp;#10;size_type_ls = [&amp;#10;    ((0, VERTICAL_OFFSET), target_paths),&amp;#10;    ((-HORIZONTAL_OFFSET, -VERTICAL_OFFSET), left_paths),&amp;#10;    ((HORIZONTAL_OFFSET, -VERTICAL_OFFSET), right_paths)&amp;#10;]&amp;#10;# preload images, by creating an image component for each &amp;#10;# image and putting it in a dictionary, where the keys of &amp;#10;# the dictionary are strings of image paths&amp;#10;images_dict = {}&amp;#10;for tup in size_type_ls:&amp;#10;    pos = tup[0]&amp;#10;    img_paths = tup[1]&amp;#10;    for img_path in img_paths:&amp;#10;        # skip if it's a baseline trial&amp;#10;        if img_path == 'baseline':&amp;#10;            continue&amp;#10;        new_img = leftimg_factory(&amp;#10;            name=img_path,&amp;#10;            image=img_path,&amp;#10;            spec_pos=pos&amp;#10;        )&amp;#10;        images_dict[img_path] = new_img&amp;#10;&amp;#10;### END FORM IMAGE COMPONENTS ###&amp;#10;&amp;#10;&amp;#10;# initialize trial order counter&amp;#10;trial_counter = 0&amp;#10;&amp;#10;&amp;#10;&amp;#10;# set constants&amp;#10;MIN_TRIAL_DURATION = 2&amp;#10;# fetch and set total number of blocks&amp;#10;N_BLOCKS = len(block_order) &amp;#10;&amp;#10;# form a dictionary that holds necessary information&amp;#10;# for each block type&amp;#10;block_dict = {&amp;#10;    'test': {&amp;#10;            'instruction': &quot;DOLD\n\nhitta den dolda formen&quot;,&amp;#10;            'inloop_trial_no': 4,&amp;#10;            'response_keys': [LEFT_KEY, RIGHT_KEY],&amp;#10;        },&amp;#10;    'control': {&amp;#10;            'instruction': &quot;MARKERAD\n\nhitta den markerade formen&quot;,&amp;#10;            'inloop_trial_no': 8,&amp;#10;            'response_keys': [LEFT_KEY, RIGHT_KEY],&amp;#10;        },&amp;#10;    'baseline': {&amp;#10;            'instruction': &quot;KORS\n\ntitta på korset&quot;,&amp;#10;            'inloop_trial_no': 1,&amp;#10;            'response_keys': [],&amp;#10;        },&amp;#10;}&amp;#10;&amp;#10;&amp;#10;# initialize the string variable which holds block instruction&amp;#10;# text&amp;#10;first_block_type = block_order[0]&amp;#10;block_instr_str = block_dict[first_block_type]['instruction']&amp;#10;&amp;#10;# create keyboard instance&amp;#10;key_resp_trial = keyboard.Keyboard()" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="/* Syntax Error: Fix Python code */" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="if ((block_type === &quot;baseline&quot;)) {&amp;#10;    cross_opacity = 1;&amp;#10;    image_opacity = 0;&amp;#10;} else {&amp;#10;    cross_opacity = 0;&amp;#10;    image_opacity = 1;&amp;#10;    correct_key = correct_keys[trial_counter];&amp;#10;    left_path = left_paths[trial_counter];&amp;#10;    right_path = right_paths[trial_counter];&amp;#10;    target_path = target_paths[trial_counter];&amp;#10;}&amp;#10;click_indicator_visible = false;&amp;#10;has_pressed = false;&amp;#10;theseKeys = [];&amp;#10;polygon_trial_clicked.opacity = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="if block_type == 'baseline':&amp;#10;    cross_opacity = 1&amp;#10;    image_opacity = 0&amp;#10;    correct_key = ''&amp;#10;else:&amp;#10;    cross_opacity = 0&amp;#10;    image_opacity = 1&amp;#10;    correct_key = correct_keys[trial_counter]&amp;#10;    left_path = left_paths[trial_counter]&amp;#10;    right_path = right_paths[trial_counter]&amp;#10;    target_path = target_paths[trial_counter]&amp;#10;    image_context_left = images_dict[left_path]&amp;#10;    image_context_right = images_dict[right_path]&amp;#10;    image_target = images_dict[target_path]&amp;#10;&amp;#10;# reset variables related&amp;#10;# to participant response&amp;#10;click_indicator_visible = False&amp;#10;has_pressed = False&amp;#10;theseKeys = []&amp;#10;polygon_trial_clicked.opacity = 0&amp;#10;key_resp_trial.keys = []&amp;#10;key_resp_trial.rt = []&amp;#10;key_resp_trial.status = NOT_STARTED&amp;#10;_key_resp_trial_allKeys = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="# *key_resp_trial* updates&amp;#10;waitOnFlip = False&amp;#10;if key_resp_trial.status == NOT_STARTED and tThisFlip &gt;= 0.0-frameTolerance:&amp;#10;    # keep track of start time/frame for later&amp;#10;    key_resp_trial.frameNStart = frameN  # exact frame index&amp;#10;    key_resp_trial.tStart = t  # local t and not account for scr refresh&amp;#10;    key_resp_trial.tStartRefresh = tThisFlipGlobal  # on global time&amp;#10;    win.timeOnFlip(key_resp_trial, 'tStartRefresh')  # time at next scr refresh&amp;#10;    key_resp_trial.status = STARTED&amp;#10;    # AllowedKeys looks like a variable named `inloop_keys`&amp;#10;    if not type(inloop_keys) in [list, tuple, np.ndarray]:&amp;#10;        if not isinstance(inloop_keys, str):&amp;#10;            logging.error('AllowedKeys variable `inloop_keys` is not string- or list-like.')&amp;#10;            core.quit()&amp;#10;        elif not ',' in inloop_keys:&amp;#10;            inloop_keys = (inloop_keys,)&amp;#10;        else:&amp;#10;            inloop_keys = eval(inloop_keys)&amp;#10;    # keyboard checking is just starting&amp;#10;    waitOnFlip = True&amp;#10;    win.callOnFlip(key_resp_trial.clock.reset)  # t=0 on next screen flip&amp;#10;    win.callOnFlip(key_resp_trial.clearEvents, eventType='keyboard')  # clear events on next screen flip&amp;#10;if key_resp_trial.status == STARTED:&amp;#10;    # is it time to stop? (based on global clock, using actual start)&amp;#10;    if tThisFlipGlobal &gt; key_resp_trial.tStartRefresh + 20-frameTolerance:&amp;#10;        # keep track of stop time/frame for later&amp;#10;        key_resp_trial.tStop = t  # not accounting for scr refresh&amp;#10;        key_resp_trial.frameNStop = frameN  # exact frame index&amp;#10;        win.timeOnFlip(key_resp_trial, 'tStopRefresh')  # time at next scr refresh&amp;#10;        key_resp_trial.status = FINISHED&amp;#10;if key_resp_trial.status == STARTED and not waitOnFlip:&amp;#10;    theseKeys = key_resp_trial.getKeys(keyList=list(inloop_keys), waitRelease=False)&amp;#10;    _key_resp_trial_allKeys.extend(theseKeys)&amp;#10;    if len(_key_resp_trial_allKeys):&amp;#10;        key_resp_trial.keys = _key_resp_trial_allKeys[-1].name  # just the last key pressed&amp;#10;        key_resp_trial.rt = _key_resp_trial_allKeys[-1].rt&amp;#10;        # was this correct?&amp;#10;        if (key_resp_trial.keys == str(correct_key)) or (key_resp_trial.keys == correct_key):&amp;#10;            key_resp_trial.corr = 1&amp;#10;        else:&amp;#10;            key_resp_trial.corr = 0&amp;#10;&amp;#10;if inloop_keys and theseKeys and not has_pressed:&amp;#10;    has_pressed = True&amp;#10;    if not click_indicator_visible:&amp;#10;        polygon_trial_clicked.opacity = 1&amp;#10;        click_indicator_visible = True&amp;#10;&amp;#10;# check if participant has clicked and the&amp;#10;# minimum trial duration has passed&amp;#10;if has_pressed and t &gt;= MIN_TRIAL_DURATION:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if block_type != 'baseline':&amp;#10;    for img in [image_target, image_context_left, image_context_right]:&amp;#10;        img.draw()&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if (((inloop_keys &amp;&amp; theseKeys) &amp;&amp; (! has_pressed))) {&amp;#10;    has_pressed = true;&amp;#10;    if ((! click_indicator_visible)) {&amp;#10;        polygon_trial_clicked.opacity = 1;&amp;#10;        click_indicator_visible = true;&amp;#10;    }&amp;#10;}&amp;#10;if ((has_pressed &amp;&amp; (t &gt;= MIN_TRIAL_DURATION))) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="trial_counter += 1;&amp;#10;if ((block_type === &quot;baseline&quot;)) {&amp;#10;    thisExp.addData(&quot;left_image_path&quot;, &quot;baseline&quot;);&amp;#10;} else {&amp;#10;    thisExp.addData(&quot;left_image_path&quot;, left_path);&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="trial_counter += 1&amp;#10;&amp;#10;if block_type == 'baseline':&amp;#10;    thisExp.addData('left_image_path', 'baseline')&amp;#10;else:&amp;#10;    thisExp.addData('left_image_path', left_path)&amp;#10;&amp;#10;if key_resp_trial.keys in ['1', '3']:&amp;#10;    inner_trial_loop.addData('key_resp_trial.keys',key_resp_trial.keys)&amp;#10;&amp;#10;if block_type == 'baseline':&amp;#10;    inner_trial_loop.addData('key_resp_trial.corr', 'baseline')&amp;#10;elif key_resp_trial.keys in ['', [], None] or key_resp_trial.keys == MR_TRIGGERKEY_TUPLE[0]:&amp;#10;    inner_trial_loop.addData('key_resp_trial.corr', 'no_response')&amp;#10;elif key_resp_trial.corr == 1:&amp;#10;    inner_trial_loop.addData('key_resp_trial.corr', 'correct')&amp;#10;    inner_trial_loop.addData('key_resp_trial.rt', key_resp_trial.rt)&amp;#10;else:&amp;#10;    inner_trial_loop.addData('key_resp_trial.corr', 'incorrect')&amp;#10;    inner_trial_loop.addData('key_resp_trial.rt', key_resp_trial.rt)&amp;#10;" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_trial" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <PolygonComponent name="cross">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="cross" valType="code" updates="None" name="name"/>
        <Param val="$cross_opacity" valType="code" updates="set every repeat" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="constant" name="shape"/>
        <Param val="(5, 5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="20" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <PolygonComponent name="polygon_trial_clicked">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="polygon_trial_clicked" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, -7.5)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="rectangle" valType="str" updates="constant" name="shape"/>
        <Param val="(0.5, 0.5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="10" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
    </Routine>
    <Routine name="block_instructions">
      <TextComponent name="block_instr_text">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="2" valType="code" updates="constant" name="letterHeight"/>
        <Param val="block_instr_text" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="3" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="$block_instr_str" valType="str" updates="set every repeat" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="20" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <CodeComponent name="block_instr_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="import itertools&amp;#10;&amp;#10;# generate lists of lists, where each inner list holds&amp;#10;# trial durations with an average duration of 1s&amp;#10;numbers = [0.8, 0.9, 1, 1.1, 1.2]&amp;#10;four_durs = [list(seq) for seq in itertools.combinations_with_replacement(numbers, 4) if sum(seq) == 4]&amp;#10;eight_durs = [list(seq) for seq in itertools.combinations_with_replacement(numbers, 8) if sum(seq) == 8]&amp;#10;&amp;#10;# initialize counter that keeps track of which block is happening&amp;#10;# now&amp;#10;block_counter = 0" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="&amp;#10;        // add-on: list(s: string): string[]&amp;#10;        function list(s) {&amp;#10;            // if s is a string, we return a list of its characters&amp;#10;            if (typeof s === 'string')&amp;#10;                return s.split('');&amp;#10;            else&amp;#10;                // otherwise we return s:&amp;#10;                return s;&amp;#10;        }&amp;#10;        &amp;#10;        import * as itertools from 'itertools';&amp;#10;var block_counter, eight_durs, four_durs, numbers;&amp;#10;numbers = [0.8, 0.9, 1, 1.1, 1.2];&amp;#10;four_durs = function () {&amp;#10;    var _pj_a = [], _pj_b = itertools.combinations_with_replacement(numbers, 4);&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var seq = _pj_b[_pj_c];&amp;#10;        if (([seq].reduce( function(x,y) { return x+y; }&amp;#10;) === 4)) {&amp;#10;            _pj_a.push(list(seq));&amp;#10;        }&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;eight_durs = function () {&amp;#10;    var _pj_a = [], _pj_b = itertools.combinations_with_replacement(numbers, 8);&amp;#10;    for (var _pj_c = 0, _pj_d = _pj_b.length; (_pj_c &lt; _pj_d); _pj_c += 1) {&amp;#10;        var seq = _pj_b[_pj_c];&amp;#10;        if (([seq].reduce( function(x,y) { return x+y; }&amp;#10;) === 8)) {&amp;#10;            _pj_a.push(list(seq));&amp;#10;        }&amp;#10;    }&amp;#10;    return _pj_a;&amp;#10;}&amp;#10;.call(this);&amp;#10;block_counter = 0;&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="block_type = block_order[block_counter];&amp;#10;inloop_trial_no = block_dict[block_type][&quot;inloop_trial_no&quot;];&amp;#10;if ((inloop_trial_no === 1)) {&amp;#10;    loop_isi_durs = [1];&amp;#10;} else {&amp;#10;    if ((inloop_trial_no === 4)) {&amp;#10;        loop_isi_durs = choice(four_durs);&amp;#10;    } else {&amp;#10;        loop_isi_durs = choice(eight_durs);&amp;#10;    }&amp;#10;}&amp;#10;shuffle(loop_isi_durs);&amp;#10;inloop_counter = 0;&amp;#10;inloop_keys = block_dict[block_type][&quot;response_keys&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="block_type = block_order[block_counter]&amp;#10;&amp;#10;# fetch the number of trials to be used in this block&amp;#10;# (the number of trials in the inner loop)&amp;#10;inloop_trial_no = block_dict[block_type]['inloop_trial_no']&amp;#10;&amp;#10;if inloop_trial_no == 1:&amp;#10;    loop_isi_durs = [1]&amp;#10;elif inloop_trial_no == 4:&amp;#10;    loop_isi_durs = choice(four_durs)&amp;#10;else:&amp;#10;    loop_isi_durs = choice(eight_durs)&amp;#10;# shuffle the ISI durations so that the order&amp;#10;# is random&amp;#10;shuffle(loop_isi_durs)&amp;#10;&amp;#10;# initialize counter of number of trials done in current loop&amp;#10;# iteration&amp;#10;inloop_counter = 0&amp;#10;&amp;#10;# set the correct set of allowed responses for current loop iteration&amp;#10;# (either none allowed, or 'left'/'right')&amp;#10;inloop_keys = block_dict[block_type]['response_keys']" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Py" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="block_counter += 1;&amp;#10;if ((block_counter &lt; N_BLOCKS)) {&amp;#10;    block_instr_str = block_dict[block_order[block_counter]][&quot;instruction&quot;];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="block_counter += 1&amp;#10;&amp;#10;# get instruction text to display for following block&amp;#10;if (block_counter &lt; N_BLOCKS):&amp;#10;    block_instr_str = block_dict[block_order[block_counter]]['instruction']" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="block_instr_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="isi_800_1200ms">
      <PolygonComponent name="isi_cross">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="fillColor"/>
        <Param val="rgb" valType="str" updates="constant" name="fillColorSpace"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="$[-1,-1,-1]" valType="str" updates="constant" name="lineColor"/>
        <Param val="rgb" valType="str" updates="constant" name="lineColorSpace"/>
        <Param val="1" valType="code" updates="constant" name="lineWidth"/>
        <Param val="4" valType="int" updates="constant" name="nVertices"/>
        <Param val="isi_cross" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="cross" valType="str" updates="constant" name="shape"/>
        <Param val="(5, 5)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="" valType="list" updates="constant" name="vertices"/>
      </PolygonComponent>
      <CodeComponent name="isi_code">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="isi_duration = loop_isi_durs[inloop_counter];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="# the point of the wrapping 'skip_isi_loop' is:&amp;#10;# don't run ISI routine if&amp;#10;# in a baseline block, to make&amp;#10;# sure that the baseline block&amp;#10;# only runs for 20s total&amp;#10;&amp;#10;# set inter stimulus interval duration&amp;#10;isi_duration = loop_isi_durs[inloop_counter]" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if t &gt;= isi_duration:&amp;#10;    continueRoutine = False" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="if ((t &gt;= isi_duration)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="inloop_counter += 1;&amp;#10;" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="inloop_counter += 1" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="isi_code" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="end_screen">
      <TextComponent name="text_end">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="1" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_end" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="2" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Nu är experimentet klart." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="27" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="wait_for_mr_signal">
      <KeyboardComponent name="trigger_listener">
        <Param val="MR_TRIGGERKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="trigger_listener" valType="code" updates="None" name="name"/>
        <Param val="True" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
    <Routine name="instructions_part_one">
      <TextComponent name="text_instructions_part_one">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_part_one" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="I detta test ska du hitta former gömda i rutor med linjer.&amp;#10;&amp;#10;Du ska hitta formen som visas på toppen av skärmen i samma storlek och orientering i en av de två rutorna. I vissa fall så har formen markerats med kraftigare linjer, du kommer att få veta när du ska leta efter dem.&amp;#10;&amp;#10;Lägg höger pekfinger på knappdosans vänstra knapp och långfingret på högra knappen och lämna dem där. När du upptäcker formen i vänstra rutan trycker du på vänstra knappen, om du ser den i högra rutan trycker du på högra knappen.  &amp;#10;&amp;#10;Du har 20 sekunder på dig att hitta formen. Om du svarar innan två sekunder gått så stannar bilden kvar en kort stund och en liten kvadrat visas längst ner på skärmen innan nästa bild kommer upp. Svara så fort du kan utan att det blir fel, d.v.s. klicka så fort du ser formen, även om två sekunder inte har gått än.&amp;#10;&amp;#10;När ett kors visas på skärmen ska du titta på korset.  &amp;#10;&amp;#10;Tryck vänster knapp för att se exempel på att hitta former." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="27" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_instructions_part_one">
        <Param val="LEFTKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_instructions_part_one" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="nothing" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <CodeComponent name="code_setup">
        <Param val="###SET EXPERIMENT CONSTANTS###&amp;#10;# trial image width/height size (in deg)&amp;#10;IMAGE_SIZE = 7&amp;#10;&amp;#10;# vertical offset of trial images from central horizontal line&amp;#10;# (in deg)&amp;#10;VERTICAL_OFFSET = 3.75&amp;#10;# horizontal offset of (context) trial images from central&amp;#10;# vertical line (in deg)&amp;#10;HORIZONTAL_OFFSET = 5&amp;#10;&amp;#10;# medium text size&amp;#10;MID_TXTSIZE = 0.6&amp;#10;&amp;#10;# demonstration found/not found messages&amp;#10;NOTFOUND_TXT = 'Formen fanns här. Tryck höger knapp.'&amp;#10;FOUND_TXT = 'Precis, formen fanns här. Tryck höger knapp.'&amp;#10;&amp;#10;# keyboard keys (or response button signals, if they are&amp;#10;# converted to keyboard presses) that are to be interpreted&amp;#10;# as left/right responses&amp;#10;LEFT_KEY = '3'&amp;#10;RIGHT_KEY = '1'&amp;#10;# it's not allowed to enter non-tuple/list variables in&amp;#10;# keyboard response components' 'allowed keys' fields,&amp;#10;# so also specify tuples to use&amp;#10;RESPONSE_KEYS = (LEFT_KEY, RIGHT_KEY)&amp;#10;LEFTKEY_TUPLE = (LEFT_KEY,)&amp;#10;RIGHTKEY_TUPLE = (RIGHT_KEY,)&amp;#10;&amp;#10;# 'keyboard key' that MR trigger signal is&amp;#10;# converted into ('5' is commonly used)&amp;#10;MR_TRIGGERKEY_TUPLE = ('5',)&amp;#10;&amp;#10;###END SET EXPERIMENT CONSTANTS###" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="IMAGE_SIZE = 7;&amp;#10;VERTICAL_OFFSET = 3.75;&amp;#10;HORIZONTAL_OFFSET = 5;&amp;#10;MID_TXTSIZE = 0.6;&amp;#10;NOTFOUND_TXT = &quot;Formen fanns h\u00e4r. Tryck h\u00f6ger knapp.&quot;;&amp;#10;FOUND_TXT = &quot;Precis, formen fanns h\u00e4r. Tryck h\u00f6ger knapp.&quot;;&amp;#10;LEFT_KEY = &quot;3&quot;;&amp;#10;RIGHT_KEY = &quot;1&quot;;&amp;#10;RESPONSE_KEYS = [LEFT_KEY, RIGHT_KEY];&amp;#10;LEFTKEY_TUPLE = [LEFT_KEY];&amp;#10;RIGHTKEY_TUPLE = [RIGHT_KEY];&amp;#10;MR_TRIGGERKEY_TUPLE = [&quot;5&quot;];&amp;#10;" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_setup" valType="code" updates="None" name="name"/>
      </CodeComponent>
    </Routine>
    <Routine name="demo_control">
      <ImageComponent name="image_demo_left_control">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli_left/demonstration/demo_control_wtarget.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_demo_left_control" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-HORIZONTAL_OFFSET, -VERTICAL_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_demo_control">
        <Param val="RESPONSE_KEYS" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_demo_control" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="image_demo_right_control">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli_left/demonstration/demo_control_no_target.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_demo_right_control" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(HORIZONTAL_OFFSET, -VERTICAL_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="code_demo_control">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="has_pressed_once = false;&amp;#10;theseKeys = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="has_pressed_once = False&amp;#10;&amp;#10;# ensure that keys are reset&amp;#10;theseKeys = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if RIGHT_KEY in theseKeys and has_pressed_once:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if theseKeys and not has_pressed_once:&amp;#10;    has_pressed_once = True&amp;#10;    image_demo_left_control.image = 'stimuli_left/demonstration/demo_control_wtarget_highlighted.jpg'&amp;#10;    if RIGHT_KEY in theseKeys:&amp;#10;        text_demo_control_left.text = NOTFOUND_TXT&amp;#10;    else:&amp;#10;        text_demo_control_left.text = FOUND_TXT&amp;#10;    text_demo_control_right.setAutoDraw(False)&amp;#10;    theseKeys = []&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((_pj.in_es6(RIGHT_KEY, theseKeys) &amp;&amp; has_pressed_once)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if ((theseKeys &amp;&amp; (! has_pressed_once))) {&amp;#10;    has_pressed_once = true;&amp;#10;    image_demo_left_control.image = &quot;stimuli_left/demonstration/demo_control_wtarget_highlighted.jpg&quot;;&amp;#10;    if (_pj.in_es6(RIGHT_KEY, theseKeys)) {&amp;#10;        text_demo_control_left.text = NOTFOUND_TXT;&amp;#10;    } else {&amp;#10;        text_demo_control_left.text = FOUND_TXT;&amp;#10;    }&amp;#10;    text_demo_control_right.setAutoDraw(false);&amp;#10;    theseKeys = [];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_demo_control" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <ImageComponent name="image_demo_target_control">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli_left/demonstration/demo_control_target.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_demo_target_control" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, VERTICAL_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <TextComponent name="text_demo_control_left">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_demo_control_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-IMAGE_SIZE * 6/5, VERTICAL_OFFSET * 4/5)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Tryck vänster knapp om du ser formen på denna sida." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="IMAGE_SIZE" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_demo_control_right">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_demo_control_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(IMAGE_SIZE * 6/5, VERTICAL_OFFSET * 4/5)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Tryck höger knapp om du ser formen på denna sida." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="IMAGE_SIZE" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="demo_test">
      <ImageComponent name="image_demo_test_left">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli_left/demonstration/demo_test_no_target.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_demo_test_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-HORIZONTAL_OFFSET, -VERTICAL_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <KeyboardComponent name="key_resp_demo">
        <Param val="RESPONSE_KEYS" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_demo" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
      <ImageComponent name="image_demo_test_right">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli_left/demonstration/demo_test_wtarget.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_demo_test_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(HORIZONTAL_OFFSET, -VERTICAL_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <ImageComponent name="image_demo_test_target">
        <Param val="center" valType="str" updates="constant" name="anchor"/>
        <Param val="$[1,1,1]" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="False" valType="bool" updates="constant" name="flipHoriz"/>
        <Param val="False" valType="bool" updates="constant" name="flipVert"/>
        <Param val="stimuli_left/demonstration/demo_test_target.png" valType="str" updates="constant" name="image"/>
        <Param val="linear" valType="str" updates="constant" name="interpolate"/>
        <Param val="None" valType="str" updates="constant" name="mask"/>
        <Param val="image_demo_test_target" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, VERTICAL_OFFSET)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="(IMAGE_SIZE, IMAGE_SIZE)" valType="list" updates="constant" name="size"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="512" valType="code" updates="constant" name="texture resolution"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
      </ImageComponent>
      <CodeComponent name="code_test_demo">
        <Param val="" valType="extendedCode" updates="constant" name="Before Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Before JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="Begin JS Experiment"/>
        <Param val="has_pressed_once = false;&amp;#10;theseKeys = [];&amp;#10;" valType="extendedCode" updates="constant" name="Begin JS Routine"/>
        <Param val="has_pressed_once = False&amp;#10;&amp;#10;# ensure that keys are reset&amp;#10;theseKeys = []" valType="extendedCode" updates="constant" name="Begin Routine"/>
        <Param val="Auto-&gt;JS" valType="str" updates="None" name="Code Type"/>
        <Param val="if RIGHT_KEY in theseKeys and has_pressed_once:&amp;#10;    continueRoutine = False&amp;#10;&amp;#10;if theseKeys and not has_pressed_once:&amp;#10;    has_pressed_once = True&amp;#10;    if LEFT_KEY in theseKeys:&amp;#10;        text_demo_test_right.text = NOTFOUND_TXT&amp;#10;    else:&amp;#10;        text_demo_test_right.text = FOUND_TXT&amp;#10;    text_demo_test_left.setAutoDraw(False)&amp;#10;    image_demo_test_right.image = 'stimuli_left/demonstration/demo_test_wtarget_highlighted.png'&amp;#10;    theseKeys = []&amp;#10;" valType="extendedCode" updates="constant" name="Each Frame"/>
        <Param val="var _pj;&amp;#10;function _pj_snippets(container) {&amp;#10;    function in_es6(left, right) {&amp;#10;        if (((right instanceof Array) || ((typeof right) === &quot;string&quot;))) {&amp;#10;            return (right.indexOf(left) &gt; (- 1));&amp;#10;        } else {&amp;#10;            if (((right instanceof Map) || (right instanceof Set) || (right instanceof WeakMap) || (right instanceof WeakSet))) {&amp;#10;                return right.has(left);&amp;#10;            } else {&amp;#10;                return (left in right);&amp;#10;            }&amp;#10;        }&amp;#10;    }&amp;#10;    container[&quot;in_es6&quot;] = in_es6;&amp;#10;    return container;&amp;#10;}&amp;#10;_pj = {};&amp;#10;_pj_snippets(_pj);&amp;#10;if ((_pj.in_es6(RIGHT_KEY, theseKeys) &amp;&amp; has_pressed_once)) {&amp;#10;    continueRoutine = false;&amp;#10;}&amp;#10;if ((theseKeys &amp;&amp; (! has_pressed_once))) {&amp;#10;    has_pressed_once = true;&amp;#10;    if (_pj.in_es6(LEFT_KEY, theseKeys)) {&amp;#10;        text_demo_test_right.text = NOTFOUND_TXT;&amp;#10;    } else {&amp;#10;        text_demo_test_right.text = FOUND_TXT;&amp;#10;    }&amp;#10;    text_demo_test_left.setAutoDraw(false);&amp;#10;    image_demo_test_right.image = &quot;stimuli_left/demonstration/demo_test_wtarget_highlighted.png&quot;;&amp;#10;    theseKeys = [];&amp;#10;}&amp;#10;" valType="extendedCode" updates="constant" name="Each JS Frame"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Experiment"/>
        <Param val="" valType="extendedCode" updates="constant" name="End JS Routine"/>
        <Param val="" valType="extendedCode" updates="constant" name="End Routine"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="code_test_demo" valType="code" updates="None" name="name"/>
      </CodeComponent>
      <TextComponent name="text_demo_test_left">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_demo_test_left" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(-IMAGE_SIZE * 6/5, VERTICAL_OFFSET * 4/5)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Tryck vänster knapp om du ser formen på denna sida." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="IMAGE_SIZE" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <TextComponent name="text_demo_test_right">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="MID_TXTSIZE" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_demo_test_right" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(IMAGE_SIZE * 6/5, VERTICAL_OFFSET * 4/5)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="Tryck höger knapp om du ser formen på denna sida." valType="str" updates="constant" name="text"/>
        <Param val="deg" valType="str" updates="None" name="units"/>
        <Param val="IMAGE_SIZE" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
    </Routine>
    <Routine name="instructions_part_two">
      <TextComponent name="text_instructions_part_two">
        <Param val="white" valType="str" updates="constant" name="color"/>
        <Param val="rgb" valType="str" updates="constant" name="colorSpace"/>
        <Param val="1" valType="num" updates="constant" name="contrast"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="" valType="str" updates="constant" name="flip"/>
        <Param val="Arial" valType="str" updates="constant" name="font"/>
        <Param val="LTR" valType="str" updates="None" name="languageStyle"/>
        <Param val="0.7" valType="code" updates="constant" name="letterHeight"/>
        <Param val="text_instructions_part_two" valType="code" updates="None" name="name"/>
        <Param val="1" valType="code" updates="constant" name="opacity"/>
        <Param val="0" valType="code" updates="constant" name="ori"/>
        <Param val="(0, 0)" valType="list" updates="constant" name="pos"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="True" valType="bool" updates="None" name="syncScreenRefresh"/>
        <Param val="En del uppgifter i testet är mycket svåra medan andra är enklare.&amp;#10;&amp;#10;Experimentet tar vanligtvis mellan 10 och 15 minuter. Du kommer att se ett meddelande när testet är klart.&amp;#10;&amp;#10;När du är redo att börja, tryck på vänster knapp." valType="str" updates="constant" name="text"/>
        <Param val="from exp settings" valType="str" updates="None" name="units"/>
        <Param val="27" valType="code" updates="constant" name="wrapWidth"/>
      </TextComponent>
      <KeyboardComponent name="key_resp_instructions_part_two">
        <Param val="LEFTKEY_TUPLE" valType="list" updates="constant" name="allowedKeys"/>
        <Param val="" valType="str" updates="constant" name="correctAns"/>
        <Param val="False" valType="bool" updates="None" name="disabled"/>
        <Param val="True" valType="bool" updates="constant" name="discard previous"/>
        <Param val="" valType="code" updates="None" name="durationEstim"/>
        <Param val="True" valType="bool" updates="constant" name="forceEndRoutine"/>
        <Param val="key_resp_instructions_part_two" valType="code" updates="None" name="name"/>
        <Param val="False" valType="bool" updates="None" name="saveStartStop"/>
        <Param val="" valType="code" updates="None" name="startEstim"/>
        <Param val="time (s)" valType="str" updates="None" name="startType"/>
        <Param val="0.0" valType="code" updates="None" name="startVal"/>
        <Param val="duration (s)" valType="str" updates="None" name="stopType"/>
        <Param val="" valType="code" updates="constant" name="stopVal"/>
        <Param val="last key" valType="str" updates="constant" name="store"/>
        <Param val="False" valType="bool" updates="constant" name="storeCorrect"/>
        <Param val="True" valType="bool" updates="constant" name="syncScreenRefresh"/>
      </KeyboardComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="instructions_part_one"/>
    <Routine name="demo_test"/>
    <Routine name="demo_control"/>
    <Routine name="instructions_part_two"/>
    <Routine name="wait_for_mr_signal"/>
    <LoopInitiator loopType="TrialHandler" name="outer_block_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$N_BLOCKS" valType="code"/>
      <Param name="name" updates="None" val="outer_block_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="block_instructions"/>
    <LoopInitiator loopType="TrialHandler" name="inner_trial_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="$inloop_trial_no" valType="code"/>
      <Param name="name" updates="None" val="inner_trial_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="trial"/>
    <LoopInitiator loopType="TrialHandler" name="skip_isi_loop">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="None" valType="str"/>
      <Param name="conditionsFile" updates="None" val="" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="random" valType="str"/>
      <Param name="nReps" updates="None" val="block_type != 'baseline'" valType="code"/>
      <Param name="name" updates="None" val="skip_isi_loop" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="isi_800_1200ms"/>
    <LoopTerminator name="skip_isi_loop"/>
    <LoopTerminator name="inner_trial_loop"/>
    <LoopTerminator name="outer_block_loop"/>
    <Routine name="end_screen"/>
  </Flow>
</PsychoPy2experiment>
